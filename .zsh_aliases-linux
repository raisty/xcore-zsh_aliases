###XCORE+###
## sudo alias
alias sudo='sudo '

# Extended listing
alias lst='ls --color=auto'
alias ls='ls -hAF --color=auto'
alias lsr='ls -hAlF --color=auto'

# ensure remove confirmations
alias remove='rm -rfI'

# Rename file
alias rename='mv'

# human readable df
alias df='df -h'

# switch user
alias switchuser='su'

# reload zsh
alias reload='zsh --login'

# Top alias
alias top='htop'

# All is micro editor
alias nano='micro'
alias edit='micro'

# Paths
alias path='pwd'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../../'
alias home='cd ~/'
alias desktop='cd ~/Desktop'
alias documents='cd ~/Documents'
alias downloads='cd ~/Downloads'
alias music='cd ~/Music'
alias pictures='cd ~/Pictures'
alias videos='cd ~/Videos'
alias trash='cd ~/.local/share/Trash/files'
alias media='cd /media/$(whoami)'

# Environment variables
alias envpath='echo -e ${PATH//:/\\n}'
alias envshell='echo -e ${SHELL//:/\\n}'

# Start calculator with math support
alias bc='bc -l'

# Make mount command output pretty and human readable format
alias mount='mount |column -t'

# Date
alias now='date -Is'
alias nowtime='date +"%T"'
alias nowdate='date +"%Y-%m-%d"'
alias nowtz='date +"%z"'

# Show open ports
alias ports='netstat -tulanp'

# Shortcut for iptables and pass it via sudo
alias myip='hostname -I'
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
# Mac addresses
alias macs='cat /sys/class/net/*/address'

# Generate digest
alias sha1='openssl sha1'
alias sha256='openssl sha256'
alias sha384='openssl sha384'
alias sha512='openssl sha512'

# Install software with apt
alias insta='sudo apt update && sudo apt install -y'
alias uninsta='sudo apt purge -y'

# minio-mc client https://github.com/minio/mc
alias mc='minio-mc-nsg'
alias cloud='minio-mc-nsg'

# Tor & torsocks & Ghost
alias torstart='systemctl start tor'
alias torstop='systemctl stop tor'
alias torrenew='systemctl reload tor'
alias ghost='torghostng'
alias ghoststart='torghostng -s -m'
alias ghoststop='torghostng -x'
alias ghostrenew='torghostng -r'
alias torsockson='source torsocks on'
alias torsocksoff='source torsocks off'
torcheck() { curl -s https://check.torproject.org/api/ip | python3 -c "import sys, json; print(json.load(sys.stdin)['IsTor'])" }
torip() { curl -s https://check.torproject.org/api/ip | python3 -c "import sys, json; print(json.load(sys.stdin)['IP'])" }

# Wireguard
alias wgstart='wg-quick up'
alias wgstop='wg-quick down'

# Password generator
pass() {
  if [[ $1 =~ ^[0-9]+$ ]]; then
    LC_ALL=C tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' < /dev/urandom | head -c $1 | xargs
  else
    LC_ALL=C tr -dc 'A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' < /dev/urandom | head -c $(jot -r 1 50 80) | xargs
  fi
}

# SSH connect by private key
sshk() {
  if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35mssh -i \e[36m[~/.ssh/]\e[34m{key} {command}\e[m"
  elif [ -r "$1" ]; then
    KEY=$1
  else
    KEY=~/.ssh/$1
  fi
  ssh -i $KEY $2
}

# Generate SSH key
sshgen() {
  if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35mssh-keygen -t rsa -b 4096 -f \e[36m[~/.ssh/]\e[34m{key}\e[35m -C \e[34m\"{e-mail}\"\e[m"
  elif [ $1 =~ .*/.+ ]; then
    KEY=$1
  else
    KEY=~/.ssh/$1
  fi
  ssh-keygen -t rsa -b 4096 -f $KEY -C "$2"
}

# Add SSH key to server
sshcopy() {
  if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35mssh-copy-id -i \e[36m[~/.ssh/]\e[34m{key} {command}\e[m"
  elif [ $1 =~ .*/.+ ]; then
    KEY=$1
  else
    KEY=~/.ssh/$1
  fi
  ssh-copy-id -i $KEY $2
}

# Generate GPG key
alias gpggen='gpg --default-new-key-algo rsa4096 --gen-key'
alias gpggenpass=' echo "Passphrase: " && echo pass | gpg --default-new-key-algo rsa4096 --gen-key --passphrase-fd 0 && read -p "Proceed with clearing screen - press any key" && clear && printf "\e[3J"'

# List devices
lsdevice() {
  if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35mlsblk -dp -x SIZE -o \e[36m[NAME,TRAN,TYPE,SIZE]\e[34m{2) output}\e[35m | grep -A 1 -w \e[36m[USB]\e[34m{1) device}\e[m"
  elif [ -z "$1" ]; then
    DEVICE=USB
  else
    DEVICE=$1
  fi
  if [ -z "$2" ]; then
    OUTPUT=NAME,TRAN,TYPE,SIZE
  else
    OUTPUT=$2
  fi
  lsblk -dp -x SIZE -o $OUTPUT | grep -A 1 -w $DEVICE
}

# Create disk from image
mkstick() {
  if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35msudo umount \e[34m{mount}\e[35m && sudo dd bs=4M if=\e[34m{image}\e[35m of=\e[34m{mount}\e[35m conv=fdatasync status=progress\e[m"
  elif [ ! -x "$(lsblk -dpn -o NAME,TRAN | grep -A 1 -w usb | grep -A 0 -w $1)" ]; then
    echo "❌ \e[31m\e[3mError:\e[m Device is not USB on this mounting point\e[m"
    exit
  elif [ ! -r "$2" ]; then
    echo "❌ \e[31m\e[3mError:\e[m Cannot read image file\e[m"
    exit
  fi
  sudo umount $1 && sudo dd bs=4M if=$2 of=$1 conv=fdatasync status=progress
}

# Run Git with specific SSH key
gitk() {
  if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35mssh-agent bash -c \"ssh-add \e[34m{key}\e[35m; \e[34m{command}\e[35m\"\e[m"
  elif [ -r "$1" ]; then
    KEY=$1
  else
    KEY=~/.ssh/$1
  fi
  ssh-agent bash -c "ssh-add $KEY; $COMMAND"
}

# OS Version
os() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35mlsb_release \e[34m{command: -i,-d,-r,-c,-a}\e[35m | cut -f2-\e[m"
  elif [ "$1" = "-i" ] || [ "$1" = "--id" ]; then
    lsb_release -i | cut -f2-
  elif [ "$1" = "-d" ] || [ "$1" = "--description" ]; then
    lsb_release -d | cut -f2-
  elif [ "$1" = "-r" ] || [ "$1" = "--release" ]; then
    lsb_release -r | cut -f2-
  elif [ "$1" = "-c" ] || [ "$1" = "--codename" ]; then
    lsb_release -c | cut -f2-
  elif [ "$1" = "-a" ] || [ "$1" = "--all" ]; then
    lsb_release -a | cut -f2-
  else
    lsb_release -d | cut -f2-
  fi
}

# Check SHA256SUM
sha256verify() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35msha256sum -c \e[34m{file}\e[m"
  elif [ -r "$1" ]; then
    sha256sum -c $1 2>&1 | awk '/VERIFIED/'
  else
    sha256sum -c SHA256SUMS 2>&1 | awk '/VERIFIED/'
  fi
}

# Check SHA512SUM
sha512verify() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "❓\e[33m\e[3mHelp:\e[m \e[35msha512sum -c \e[34m{file}\e[m"
  elif [ -r "$1" ]; then
    sha512sum -c $1 2>&1 | awk '/VERIFIED/'
  else
    sha512sum -c SHA512SUMS 2>&1 | awk '/VERIFIED/'
  fi
}

## Greeting
hello() {
  clear
  echo "\033[1;34mWelcome $USER\n"
  echo "\033[0;34mToday is \033[1;36m$(date "+%c")"
  echo "\033[0;34mYou are working on:"
  echo "\033[1;36m\t$(cat /sys/devices/virtual/dmi/id/sys_vendor) - $(cat /sys/devices/virtual/dmi/id/product_name)"
  echo "\tOS: $(os) / Arch: $(uname -p)\033[0m"
  echo "\033[0;34mYour IP address: \033[1;36m$(myip)\033[0m"
  echo "\033[0m\nEnter ↵"
  read -t 120
  clear
}

###XCORE-###
